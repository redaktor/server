// Sign in
const srp6aClient = new SRPClientSession(srp6aConfig);
srp6aClient.step1(testUsername, testPassword);

const server = new SRPServerSession(srp6aConfig);
// server gets identifier from client, salt+verifier from db (from signup)
const B = server.step1(testUsername, salt, verifier);

// client gets challenge B from server step1 and sends prove M1 to server
const { A, M1 } = srp6aClient.step2(salt, B);

// servers checks client prove M1 and sends server prove M2 to client
const M2 = server.step2(A, M1);

// client ensures server identity
srp6aClient.step3(M2);

efbc84fc-13ff5800-a2f8ded8-f1ba7c88



v
{
   "salt":"19a26ee02b05f618b972ac0a0eeb0f2ebbae6905f87d69b980fe71244791c473006db8f9c65e26c49c4faf1f123ec2c73ee954cf5f482140e33cf61726fcebce",
   "verifier":"a50d0ff129b4ad568000ac7b2b68d087addee8b66c465806f811bf3939de6ffb21a1c17626dc86317fb08b126de0815a822aa5c1630616c0a46e37cfe3cec161f3da2d836ee6b199cacd9ed3237a00ac15126bac87bb118dbc2572d145ff0bbb938c638655659b0902538030bd85e34b976e3ff3f52942403ad7b0b876f37c921a57f853b90346fde140d665ada808dbd8b28225da8dfd7e01653a71bb766d72a5521dd1282c7e8ceaef23822ed9f40c1f2e7789f0d556628ea39b198c8044b62299bd66003937f97b6fb3a7250a1c7f8dfbe49f0ed3da2529b28836a9472878018b800643cb3fa9562f874a59031a7084085dabd14a09a41d33d57c884cfc1cc7aeb0068838ebe83d01b82525794c028f4ffc97cd46349a19290d8dd369697db4b34c2e619e38af260412848214e1e3fa437e34d9beed30771eb664194449179b6f61604e48d6fcdcdcf55463714d5f968ba56d11898dbec3ccf371da4c2cd319f1d12160875ab14ee4f4a2ede9848501bb404f1836b08d1f573fe5bce4f54cd323fe225296be2c9cbf4acc6c2547768be6dd2b74eaa22ff55c458679afe2203190ea9a8a26c18e54219b30f89e5005782dc9bc308a75c3b879661e38cbe929718d372fdc2c22d39814e4f24f878fd7b3df8860de75c8e65feaa765447ec705101aa86cd92e4a9f0c45f11f45eb0ef43cc9e5d6bb0a2ecd1f5adbac1dd8bd61",
   "group":"4096"
}
I, v, s

c
{
   "I":"ed",
   "v":"a50d0ff129b4ad568000ac7b2b68d087addee8b66c465806f811bf3939de6ffb21a1c17626dc86317fb08b126de0815a822aa5c1630616c0a46e37cfe3cec161f3da2d836ee6b199cacd9ed3237a00ac15126bac87bb118dbc2572d145ff0bbb938c638655659b0902538030bd85e34b976e3ff3f52942403ad7b0b876f37c921a57f853b90346fde140d665ada808dbd8b28225da8dfd7e01653a71bb766d72a5521dd1282c7e8ceaef23822ed9f40c1f2e7789f0d556628ea39b198c8044b62299bd66003937f97b6fb3a7250a1c7f8dfbe49f0ed3da2529b28836a9472878018b800643cb3fa9562f874a59031a7084085dabd14a09a41d33d57c884cfc1cc7aeb0068838ebe83d01b82525794c028f4ffc97cd46349a19290d8dd369697db4b34c2e619e38af260412848214e1e3fa437e34d9beed30771eb664194449179b6f61604e48d6fcdcdcf55463714d5f968ba56d11898dbec3ccf371da4c2cd319f1d12160875ab14ee4f4a2ede9848501bb404f1836b08d1f573fe5bce4f54cd323fe225296be2c9cbf4acc6c2547768be6dd2b74eaa22ff55c458679afe2203190ea9a8a26c18e54219b30f89e5005782dc9bc308a75c3b879661e38cbe929718d372fdc2c22d39814e4f24f878fd7b3df8860de75c8e65feaa765447ec705101aa86cd92e4a9f0c45f11f45eb0ef43cc9e5d6bb0a2ecd1f5adbac1dd8bd61",
   "s":"19a26ee02b05f618b972ac0a0eeb0f2ebbae6905f87d69b980fe71244791c473006db8f9c65e26c49c4faf1f123ec2c73ee954cf5f482140e33cf61726fcebce",
   "b":"8424fd83459de4b953e09e0dd6a90dbdcb9ee22385194faf2e3be10e07a9d72bfdde2d69e8e827861ce241763127803f2d27ee938c85c3282b93e88d669c450d670e1795c8ac4613b35d255f05b3aed96979bcaa00c51ccb225af320fca8c003ee6c026a346e6bdf5429ab7f8d02ad11bd1b352e6f1c54ccd1104c409e004b531aa93db010a6b556e68f8c78833e19e32df7172372bdd823656f10b31d4bff210858591dcf067204b59afd941357075cde6ce86ad61f0cd65a14a09df2eda2946c7b4798baab30108fd28021da68187970bcc98e062dd818de154fe90e458fdd15f72e6ed2d23e1266486c24310fc2b2b1796a9baf19beaae47fe35dbf6ac4c16e12bc232fd12223b46dcffe3735971785e83b206e947a6db304aec2fa51eb550d4326f31b5126465e4d76347a8edb12a720ec4ea68274394b950cf7d58b201248dd730b8a5899fa4751e9f6e1724714fc7b6e5a59596ab6e8fce547b4221c9ab580fee8cb0822da5b30ca1198eff72f66dd7902122127988118249f3548186f81d12e45f32003f5cff3b5e82f00ff7e1ffaba06712b6e2edbb617c0f3039e0b532dae1af307dc312a6717b49a4859a2ac6411e2b99eb73a9f51ed20f9592e9a6d9d12bed5dfdac3ba32f112a548d23e247b37106c2c399dcd622cb37eb944ea9180bc0d60be4668a0e60093f50e4c69f8341e7b3dab0ffa4e195573ab9eb15f"
}

---
SEE ALSO /src/SEED/permission
---


challenge response :
USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.
login response :
USER_SRP_VERIFY signed with M2

To verify, the client and server exchange encrypted messages:

The client signs a message with the session encryption key and sends it to the server.
{
  "iss": "URL",
  "iat": 1353601026, // issued at
  "exp": 1353615556, // expires
  "nonce": "0394852-3190485-2490358" // Value used to associate a Client session with an ID Token
}
The server verifies it.
The server signs its own message with the same session encryption key and sends it to the client.
The client verifies it.
{
  "iss": "URL",
  "iat": 1353601026, // issued at
  "exp": 1353615556, // expires
  "nonce": "0394852-3190485-2490358" // Value used to associate a Client session with an ID Token
}

THEN verified :
USER_ID_TOKEN
The server responds with a full id token signed with the session encryption key.
An ID token is a JSON object containing a set of name/value pairs.
{
  "iss": "https://MYREDAKTORURL.com",
  "azp": "https://MYREDAKTORURL.com/u/1234987819200", // User URL
  "aud": "https://MYREDAKTORURL.com/u/1234987819200", // can e.g. be Group
  "sub": "10769150350006150715113082367", // default Actor ID
  "at_hash": "HK6E_P6Dh8Y93mRNtsDB1Q",
  "hd": "example.com",
  "email": "jsmith@example.com",
  "email_verified": "true",
  "iat": 1353601026, // issued at
  "nbf": 1353601027, // not before
  "exp": 1353615556, // expires
  "jti":   "0376746-2647843-3784933" // Unique Token ID
  "nonce": "0394852-3190485-2490358" // Value used to associate a Client session with an ID Token
}






---
Access Tokens (which aren't always JWTs) are used to inform an API that the bearer of the token
has been authorized to access the API and perform a predetermined set of actions
(specified by the scopes granted).
Access Tokens must never be used for authentication.
Access Tokens cannot tell if the user has authenticated.
The only user information the Access Token possesses is the user ID, located in the sub claim.
{
  "iss": "https://MYREDAKTORURL.com",
  "sub": "https://MYREDAKTORURL.com/u/1234987819200", // User ID ! (see above, only user info)
  "aud": [
    "my-api-identifier",
    "https://MYREDAKTORURL.com/u/1234987819200" // default Actor ID
  ],
  "azp": "YOUR_CLIENT_ID",
  "exp": 1353616666,
  "iat": 1353615557,
  "scope": "openid profile email address phone read:appointments"
}
In many cases, you might find it useful to retrieve additional user information at the API,
so the Access Token is also valid for calling the /userinfo API, which returns the user's
profile information.
The intended audience (indicated by the aud claim) for this token is both your custom API as
specified by its identifier (such as https://my-api-identifier)
and the /userinfo endpoint (such as https://YOUR_DOMAIN/userinfo).
---

Google’s userinfo endpoint is https://www.googleapis.com/oauth2/v3/userinfo.
In this case, you use the access token rather than the ID token to look up the user info.
Make a GET request to that endpoint and pass the access token in the HTTP Authorization header
like you normally would when making an OAuth 2.0 API request.

GET /oauth2/v3/userinfo
Host: www.googleapis.com
Authorization: Bearer ya29.Gl-oBRPLiI9IrSRA70...
The response will be a JSON object with several properties about the user.
The response will always include the sub key, which is the unique identifier for the user.
Google also returns the user’s profile information such as name (first and last),
profile photo URL, gender, locale, profile URL, and email. The server can also add its own claims,
such as Google’s hd showing the “hosted domain” of the account when using a G Suite account.

{
 "sub": "110248495921238986420",
 "name": "Aaron Parecki",
 "given_name": "Aaron",
 "family_name": "Parecki",
 "picture": "https://lh4.googleusercontent.com/-kw-iMgD
   _j34/AAAAAAAAAAI/AAAAAAAAAAc/P1YY91tzesU/photo.jpg",
 "email": "aaron.parecki@okta.com",
 "email_verified": true,
 "locale": "en",
 "hd": "okta.com"
}



--auth-flow (string)

The authentication flow for this call to execute. The API action will depend on this value. For example:
REFRESH_TOKEN_AUTH will take in a valid refresh token and return new tokens.
USER_SRP_AUTH will take in USERNAME and SRP_A and return the SRP variables to be used for next challenge execution.
USER_PASSWORD_AUTH will take in USERNAME and PASSWORD and return the next challenge or tokens.
Valid values include:
USER_SRP_AUTH : Authentication flow for the Secure Remote Password (SRP) protocol.
REFRESH_TOKEN_AUTH /REFRESH_TOKEN : Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.
CUSTOM_AUTH : Custom authentication flow.
USER_PASSWORD_AUTH : Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool.
ADMIN_USER_PASSWORD_AUTH : Admin-based user password authentication. This replaces the ADMIN_NO_SRP_AUTH authentication flow. In this flow, Cognito receives the password in the request instead of using the SRP process to verify passwords.
ADMIN_NO_SRP_AUTH is not a valid value.
Possible values:
USER_SRP_AUTH
REFRESH_TOKEN_AUTH
REFRESH_TOKEN
CUSTOM_AUTH
ADMIN_NO_SRP_AUTH
USER_PASSWORD_AUTH
ADMIN_USER_PASSWORD_AUTH
--auth-parameters (map)

The authentication parameters. These are inputs corresponding to the AuthFlow that you are invoking. The required values depend on the value of AuthFlow :
For USER_SRP_AUTH : USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY
For REFRESH_TOKEN_AUTH/REFRESH_TOKEN : REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY
For CUSTOM_AUTH : USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY
