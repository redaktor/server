import RequestBase from '../Request';
declare class Auth extends RequestBase {
    protected authUrl?: any;
    protected callbackUrl?: string;
    protected kid?: string;
    protected key?: string;
    protected secret?: string;
    protected scope?: string | string[];
    protected scopeSeparator: string;
    protected _nonceSize: number;
    debug: boolean;
    protected _protocol: string;
    protected _version: string;
    protected _headerPrefix: string;
    protected validity: number;
    _sessionData: any;
    _options: any;
    constructor(authUrl?: any, callbackUrl?: string, kid?: string, key?: string, secret?: string, scope?: string | string[], scopeSeparator?: string, _nonceSize?: number);
    initAuth(): void;
    i18nOptions(o?: any): Promise<any>;
    success(requestRes: any): any;
    resJSON(data: any, res: any, returnFn?: any): any;
    errJSON(errStr: string, res: any, status?: number): boolean;
    protected _reqError(e: any, id?: string): any;
    error(id: string, statusCode?: number, isPromise?: boolean): any;
    authError(id?: string, statusCode?: number): any;
    protected expires(validitySec?: number): number;
    protected sessionData(req?: any, kwArgs?: any): any;
    protected sessionID(): string;
    protected meID(req?: any): string;
    protected meIP(meID: string): string;
    protected hasSession(req: any): boolean;
    protected setSession(req: any, content: any): any;
    protected getSession(req: any): any;
    protected session(req: any, content?: any): any;
    protected setToken(req: any, content?: any, pw?: string): string;
    protected getTokenStr(req: any, key?: string): any;
    protected getToken(req: any, pw?: string, key?: string): any;
    protected cbUrl(o?: any, ks?: string[]): any;
    protected getCookie(): any;
    protected setCookie(content?: any): any;
    protected isStateful(req?: any): boolean;
    protected sessionOrCookie(req?: any, content?: any): any;
    protected oneTimePass(o?: any, lengthOrPointer?: number | string): string;
    protected verifyOneTimePass(o?: any, pointer?: string, code?: string): any;
    protected rfpToken(o?: any): {
        kid: string;
        exp: number;
        rfp: string;
        as: any;
    };
    protected rfpTokenInvalidate(req?: any, token?: any): any;
    private stateHashObj;
    protected stateError(req: any, messageId?: string, statusCode?: number): any;
    protected state(o?: any, cbPointer?: string, cbUrl?: string): Promise<unknown>;
    hasMe(req: any, meArr: any): boolean;
    normalizeMe(u: any): string;
    auth(req: any, res: any, kwArgs?: any): any;
}
export default Auth;
