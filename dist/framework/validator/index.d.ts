import 'reflect-metadata';
import { Validators, ExclusiveValidators } from './interfaces';
import A from './types/Array';
import B from './types/Boolean';
import N from './types/Number';
import O from './types/Object';
import S from './types/String';
import * as VALIDATE from './validate';
export declare function All(...check: ExclusiveValidators): (target: any, key: string | symbol, paramIndex?: number) => void;
export declare function Any(...check: Validators): (target: any, key: string | symbol, paramIndex?: number) => void;
export declare function Not(...check: Validators): (target: any, key: string | symbol, paramIndex?: number) => void;
export declare function One(...check: Validators): (target: any, key: string | symbol, paramIndex?: number) => void;
export declare const array: typeof A;
export declare const boolean: typeof B;
export declare const number: typeof N;
export declare const object: typeof O;
export declare const string: typeof S;
export declare const optional: import("./types/Empty").Optional, empty: import("./types/Empty").default;
export declare const Validate: (target: any, key: string | symbol, descriptor: PropertyDescriptor) => PropertyDescriptor, Validator: typeof VALIDATE.Validator, validateMeta: typeof VALIDATE.validateMeta;
export declare function eq(...comparisons: any[]): (target: any, key: string | symbol, paramIndex?: number) => void;
export declare function equals(comparisons: any[]): (target: any, key: string | symbol, paramIndex?: number) => void;
