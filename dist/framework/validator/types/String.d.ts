import Chain from './base';
import { TYPE_KEY } from '../constants';
interface String {
    [k: string]: any;
    typeName: 'string';
}
declare class String extends Chain<string> {
    [TYPE_KEY]: {
        type: string;
    };
    private F;
    private P;
    isBooleanString(): this;
    isNumberString(): this;
    isNumericString(): this;
    length(min: number, max?: number): this;
    minLength(min: number): this;
    maxLength(max: number): this;
    matches(pattern: RegExp): any;
    matches(pattern: string, modifiers?: string): any;
    contains(seed: string): this;
    notContains(seed: string): this;
    hasValidMime(): this;
    isIP(version?: 4 | 6 | "4" | "6"): this;
    isUUID(version?: 3 | 4 | 5 | "3" | "4" | "5" | ""): this;
    isAscii(): this;
    isHalfWidth(): this;
    isFullWidth(): this;
    isVariableWidth(): this;
    isHexColor(): this;
    isHexadecimal(): this;
    isMongoId(): this;
    isMultibyte(): this;
    isSurrogatePair(): this;
    isUppercase(): this;
    isLowercase(): this;
    isURN(): this;
    isHTTPSURL(): this;
    isRelativeURL(): this;
    isURL(): this;
    isURI(): this;
    isUriReference(): this;
    isUriTemplate(): this;
    isHostname(): this;
    isFQDN(): this;
    isEmailWithDisplay(): this;
    isEmail(): this;
    isHashtag(): this;
    isDateTime(): this;
    isDateString(): this;
    isDate(): this;
    isTime(): this;
    isMilitaryTime(): this;
    isRegex(): this;
    isBase64(): this;
    isCreditCard(): this;
    isDataURI(): this;
    isISIN(): this;
    isISBN(version?: 10 | 13 | "10" | "13" | ""): this;
    isISO31661(type?: 2 | 3 | "2" | "3" | ""): this;
    isISO639(type?: 1 | 2 | 3 | "1" | "2" | "3" | ""): this;
    isISO8601(): this;
    isBCP47(): this;
    isLatLong(): this;
    isMACAddress(): this;
    isJSON(): this;
    isPhoneNumber(): this;
    isMobilePhone(): this;
}
declare const _default: String;
export default _default;
