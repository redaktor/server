import { eachCB, keyCB } from '../core/interfaces';
export declare const each: import("../core/interfaces").eachFN;
export declare function eachKeys(o: any, inherited: boolean, start: number, fn: eachCB): any;
export declare function keys(o: any): string[];
export declare function keysIn(o: any): string[];
export declare function forIn(o: any, iteratee: eachCB): any;
export declare function forInRight(o: any, iteratee: eachCB): any;
export declare function forOwn(o: any, iteratee: eachCB): any;
export declare function forOwnRight(o: any, iteratee: eachCB): any;
export declare function invert(o: any): any;
export declare function invertBy(o: any, fn: keyCB): any;
export declare function mapKeys(o: any, fn: keyCB): any;
export declare function mapKeysIn(o: any, fn: keyCB): any;
export declare function mapValues(o: any, fn: keyCB): any;
export declare function unset(o: any, ...paths: string[]): any;
export declare function values(o: any): any;
export declare function valuesIn(o: any): any;
export declare function functions(o: any, inherited?: boolean): any;
export declare function functionsIn(o: any): any;
export declare function pick(o: any, ...paths: string[]): any;
export declare function pickBy(o: any, fn: keyCB, _o?: any): any;
export declare function omit(o: any, ...paths: string[]): any;
export declare function omitBy(o: any, fn: keyCB, _o?: {}): {};
export declare function toPairs(o: any, inherited?: boolean): any;
export declare function toPairsIn(o: any): any;
