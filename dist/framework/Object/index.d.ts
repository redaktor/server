import { eachCB, vCB } from '../core/interfaces';
import Collection from '../Collection';
export default class OBJECT extends Collection {
    protected _input: {};
    constructor(_input?: {}, ...args: any[]);
    create(proto: any, keys: string[]): any;
    assign(o: any, ...sources: any[]): any;
    keys: () => this;
    keysIn: () => this;
    forIn: (iteratee: eachCB) => this;
    forInRight: (iteratee: eachCB) => this;
    forOwn: (iteratee: eachCB) => this;
    forOwnRight: (iteratee: eachCB) => this;
    invert: () => this;
    invertBy: (iteratee: vCB) => this;
    mapKeys: (iteratee: eachCB) => this;
    mapKeysIn: (iteratee: eachCB) => this;
    mapValues: (iteratee: eachCB) => this;
    pick: (...paths: string[]) => this;
    pickBy: (iteratee: eachCB) => this;
    omit: (...paths: string[]) => this;
    omitBy: (iteratee: eachCB) => this;
    unset: (...paths: string[]) => this;
    values: () => this;
    valuesIn: () => this;
    functions: () => this;
    functionsIn: () => this;
    toPairs: () => this;
    toPairsIn: () => this;
    merge: (...sources: any[]) => this;
    mergeWith: (...sources: any[]) => this;
    assignIn: (...sources: any[]) => this;
    assignWith: (...sources: any[]) => this;
    assignInWith: (...sources: any[]) => this;
    defaults: (...sources: any[]) => this;
    defaultsDeep: (...sources: any[]) => this;
    findKey: (predicate: eachCB, start?: number, end?: number) => this;
    findLastKey: (predicate: eachCB, start?: number, end?: number) => this;
}
